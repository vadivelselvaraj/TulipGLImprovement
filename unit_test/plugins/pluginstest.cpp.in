/**
 *
 * This file is part of Tulip (www.tulip-software.org)
 *
 * Authors: David Auber and the Tulip development Team
 * from LaBRI, University of Bordeaux 1 and Inria Bordeaux - Sud Ouest
 *
 * Tulip is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * Tulip is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 */

//#include <cppunit/ui/qt/TestRunner.h>
#include <dirent.h>
#include <sys/stat.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <cppunit/ui/text/TestRunner.h>
#include <cppunit/XmlOutputter.h>
#include <cppunit/TextOutputter.h>
#include <cppunit/TestResultCollector.h>
#include <cppunit/TestResult.h>
#include <cppunit/extensions/TestFactoryRegistry.h>
#include <tulip/TlpTools.h>
#ifndef NDEBUG
#include <tulip/PluginLoaderTxt.h>
#endif
#include <tulip/PluginLibraryLoader.h>
#include <QtGui/qapplication.h>

int main(int argc, char **argv) {
#if defined(_GLIBCXX_HAVE_SETENV)
  std::string tlpdir("@prefix@");
  // check for lib64
  std::string tlpdir64 = tlpdir + "/lib64/tulip";
  struct stat statInfo;
  if (stat(tlpdir64.c_str(), &statInfo) == 0)
    tlpdir += "/lib64";
  else
    tlpdir += "/lib";
  setenv("TLP_DIR", tlpdir.c_str(), 1);
#else
  if (!getenv("TLP_DIR") && !getenv("TLP_PLUGINS_PATH")) {
    std::cerr << "Error: one of TLP_DIR or TLP_PLUGINS_PATH envt variables needs to be defined" << std::endl;
    return EXIT_FAILURE;
  }
#endif
  // many plugins are qt dependent so they need a QApplication
  // which must be created before the call to initTulipLib
  // to avoid any reset of LC_NUMERIC inited by this call
  QApplication app(argc, argv);
  tlp::initTulipLib();
  tlp::PluginLoader* pLoader = NULL;
#ifndef NDEBUG
  tlp::PluginLoaderTxt loader;
  pLoader = &loader;
#endif
  tlp::PluginLibraryLoader::loadPlugins(pLoader);   // library side plugins

  //CPPUNIT_NS::QtUi::TestRunner runner;
  CPPUNIT_NS::TestResult controller;
  CPPUNIT_NS::TestResultCollector result;
  controller.addListener(&result);
  
  CPPUNIT_NS::TextUi::TestRunner runner;
  runner.addTest(CPPUNIT_NS::TestFactoryRegistry::getRegistry().makeTest());
  runner.run(controller);
  
  std::ofstream xmlFileOut("cpptestresults.xml");
  CPPUNIT_NS::XmlOutputter xmlOut(&result, xmlFileOut);
  xmlOut.write();
  
  CPPUNIT_NS::TextOutputter stdOut(&result, std::cout);
  stdOut.write();
  
  return result.wasSuccessful() ? EXIT_SUCCESS : EXIT_FAILURE;  
}
