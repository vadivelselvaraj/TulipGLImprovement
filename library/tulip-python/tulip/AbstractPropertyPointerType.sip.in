/**
 *
 * This file is part of Tulip (www.tulip-software.org)
 *
 * Authors: David Auber and the Tulip development Team
 * from LaBRI, University of Bordeaux 1 and Inria Bordeaux - Sud Ouest
 *
 * Tulip is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * Tulip is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 */

// +-------------------------------------------------------------------------+
// | Tulip Python Bindings                                                   |
// | inspired from bindings by the Booggie project development team          |
// | (http://booggie.org/)                                                   |
// +-------------------------------------------------------------------------+

%Include PropertyInterface.sip

namespace tlp {

class @PROPERTY_TYPE@Property : tlp::PropertyInterface /NoDefaultCtors/ {
%TypeHeaderCode
#include <tulip/@PROPERTY_TYPE@Property.h>
%End
public :
	
	@PROPERTY_TYPE@Property(tlp::Graph *g, std::string n="");
	
	void setAllNodeValue(const @PROPERTY_NODE_TYPE@ &v);
%Docstring
tlp.@PROPERTY_TYPE@Property.setAllNodeValue(@PYTHON_NODE_TYPE@)
%End

	void setAllEdgeValue(const @PROPERTY_EDGE_TYPE@ &v);
%Docstring
tlp.@PROPERTY_TYPE@Property.setAllEdgeValue(@PYTHON_EDGE_TYPE@)
%End
	
	@PROPERTY_NODE_TYPE@ getNodeDefaultValue();
%Docstring
tlp.@PROPERTY_TYPE@Property.getNodeDefaultValue() -> @PYTHON_NODE_TYPE@
%End	
	
	@PROPERTY_EDGE_TYPE@ getEdgeDefaultValue();
%Docstring
tlp.@PROPERTY_TYPE@Property.getEdgeDefaultValue() -> @PYTHON_EDGE_TYPE@
%End	

	const @PROPERTY_NODE_TYPE@ getNodeValue(const tlp::node n);
%MethodCode
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipRes = new @PROPERTY_NODE_TYPE@(sipCpp->getNodeValue(*a0));
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
%End

%Docstring
tlp.@PROPERTY_TYPE@Property.getNodeValue(tlp.node) -> @PYTHON_NODE_TYPE@
%End

	const @PROPERTY_EDGE_TYPE@ getEdgeValue(const tlp::edge e);
%MethodCode
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipRes = new @PROPERTY_EDGE_TYPE@(sipCpp->getEdgeValue(*a0));
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
%End

%Docstring
tlp.@PROPERTY_TYPE@Property.getEdgeValue(tlp.edge) -> @PYTHON_EDGE_TYPE@
%End

	void setNodeValue(const tlp::node n, const @PROPERTY_NODE_TYPE@ &v);
%MethodCode
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipCpp->setNodeValue(*a0, *a1);
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
%End

%Docstring
tlp.@PROPERTY_TYPE@Property.setNodeValue(tlp.node, @PYTHON_NODE_TYPE@)
%End

	void setEdgeValue(const tlp::edge e, const @PROPERTY_EDGE_TYPE@ &v);
%MethodCode
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipCpp->setEdgeValue(*a0, *a1);
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
%End

%Docstring
tlp.@PROPERTY_TYPE@Property.setEdgeValue(tlp.edge, @PYTHON_EDGE_TYPE@)
%End

	@PROPERTY_NODE_TYPE@ __getitem__(const tlp::node n) const;
%MethodCode
	if (sipCpp->getGraph()->isElement(*a0)) {	
     	sipRes = new @PROPERTY_NODE_TYPE@(sipCpp->getNodeValue(*a0));
    } else {
    	sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
    }
%End

	void __setitem__(const tlp::node n, const @PROPERTY_NODE_TYPE@ &v) const;
%MethodCode
	if (sipCpp->getGraph()->isElement(*a0)) {	
     	sipCpp->setNodeValue(*a0, *a1);
    } else {
    	sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
    } 
%End

	@PROPERTY_EDGE_TYPE@ __getitem__(const tlp::edge e) const;
%MethodCode
	if (sipCpp->getGraph()->isElement(*a0)) {	
     	sipRes = new @PROPERTY_EDGE_TYPE@(sipCpp->getEdgeValue(*a0));
    } else {
    	sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
    }
     
%End

	void __setitem__(const tlp::edge e, const @PROPERTY_EDGE_TYPE@ &v) const;
%MethodCode
	if (sipCpp->getGraph()->isElement(*a0)) {	
     	sipCpp->setEdgeValue(*a0, *a1);
    } else {
    	sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
    } 
%End

	SIP_PYOBJECT __repr__() const;
%MethodCode
	std::ostringstream oss;
	oss << "<@PROPERTY_TYPE@ property " << sipCpp->getName() << ">";
	std::string s = oss.str();
	sipRes = PyString_FromString(s.c_str());
%End
	
@PROPERTY_SPECIFIC_METHODS@
	
};

};

