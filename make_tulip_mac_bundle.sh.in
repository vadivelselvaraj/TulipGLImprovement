#!/bin/sh

# This script is MAC specific, it intents to create an internet deliverable
# disk image of a tulip MAC 'bundle' in the current directory
APP_DIR=Tulip-@PACKAGE_VERSION@.app

if [ -d $APP_DIR ]; then
  rm -rf $APP_DIR
fi

BIN_BUNDLE_DIR=$APP_DIR/Contents/MacOS
BIN_BUNDLE=$BIN_BUNDLE_DIR/tulip
LIBS_BUNDLE_DIR=$APP_DIR/Contents/Frameworks
RESOURCES_BUNDLE_DIR=$APP_DIR/Contents/Resources

# copy the tulip app installed in @prefix@/bin
echo installing $APP_DIR
cp -RL @prefix@/bin/tulip.app .
mv tulip.app $APP_DIR

function make_bundle_lib() {
  slib=$1
  slibdir=$2
  bbin=$3

  oldlib=$slib
  if [ "$slib" = "*System*" ]; then
   return
  fi
  if [ "$slib" = "/usr/lib/libSystem.B.dylib" ]; then
   return
  fi
  if [ ! -f $slib ]; then
    slib=/usr/lib/$slib
  fi
  if [ -f $slib ]; then
    if [ ! -f $slibdir/`basename $slib` ]; then
       cp $slib $slibdir
       slib=`basename $slib`
       echo installing $slib in $slibdir
       # update the name of the current bundle lib
       install_name_tool -id @executable_path/../Frameworks/$slib $slibdir/$slib
    else
       slib=`basename $slib`
    fi
    echo renaming $slib in `basename $bbin`
    # package tulip bundle binary with the current bundle lib
    install_name_tool -change $oldlib @executable_path/../Frameworks/$slib $bbin
  else
    echo `basename $slib` not found... exiting
    exit
  fi
}

function package_bundle_libs() {
  blibdir=$1
  blibs=`find $blibdir -name $2 -print`
  if [ $# -eq 2 ]; then
    fdir=$1
  else
    fdir=$3
  fi
  for blib in $blibs
  do
    blibname=`basename $blib`
    slibs=`otool -L $blib | grep 'dylib ' | awk '{print $1}'`
    for lib in $slibs
    do
      libname=`basename $lib`
      if [ "$libname" = "$blibname" ]; then
	continue
      fi
      make_bundle_lib $lib $fdir $blib
    done
  done
}

# create the tulip shared libs bundle directory
mkdir -p $LIBS_BUNDLE_DIR
# look for shared libs
SHARED_LIBS=`otool -L $BIN_BUNDLE | grep dylib | awk '{print $1}'`
# copy libs in shared libs bundle directory
for LIB in $SHARED_LIBS
do
  make_bundle_lib $LIB $LIBS_BUNDLE_DIR $BIN_BUNDLE
done
# package tulip shared libs
package_bundle_libs $LIBS_BUNDLE_DIR "*.dylib"

# clean up the plugins bundle dir
TLP_PLUGINS_BUNDLE_DIR=$APP_DIR/Contents/lib/tlp/plugins
# remove lib*.a and lib*.la files
find $TLP_PLUGINS_BUNDLE_DIR -name "lib*.*a" -print | xargs rm
# remove the plugins designer bundle dir
rm -rf $TLP_PLUGINS_BUNDLE_DIR/designer
# package the lib*.so files
package_bundle_libs $TLP_PLUGINS_BUNDLE_DIR "*.so" $LIBS_BUNDLE_DIR

# copy Qt assistant application
ASSISTANT_BUNDLE_DIR=$APP_DIR/Contents/assistant.app
ASSISTANT_LIBS_BUNDLE_DIR=$ASSISTANT_BUNDLE_DIR/Contents/Frameworks
ASSISTANT_BIN_BUNDLE=$ASSISTANT_BUNDLE_DIR/Contents/MacOS/assistant
echo packaging $ASSISTANT_BUNDLE_DIR
mkdir $ASSISTANT_LIBS_BUNDLE_DIR
#update assistant binary and libs
SHARED_LIBS=`otool -L $ASSISTANT_BIN_BUNDLE | grep dylib | awk '{print $1}'`
# copy libs in shared libs bundle directory
for LIB in $SHARED_LIBS
do
  make_bundle_lib $LIB $ASSISTANT_LIBS_BUNDLE_DIR $ASSISTANT_BIN_BUNDLE
done
# package assistant shared libs
package_bundle_libs $ASSISTANT_LIBS_BUNDLE_DIR "*.dylib"

# create disk image with our bundle
echo creating Tulip-@PACKAGE_VERSION@.dmg disk image
hdiutil create -srcdir $APP_DIR -format UDZO -fs HFS+ -volname Tulip-@PACKAGE_VERSION@ -ov Tulip-@PACKAGE_VERSION@.dmg
# then internet enabled it
hdiutil internet-enable -yes tulip-@PACKAGE_VERSION@.dmg
