<?xml version='1.0'?>
<!--<!DOCTYPE book PUBLIC "-//OASIS//DTD Docbook XML V4.4//EN"
							"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">-->
<!DOCTYPE book SYSTEM "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
					<!ENTITY Tutorial_beginner SYSTEM "tutorial_beginner.docbook">
					<!ENTITY Tutorial_advanced SYSTEM "tutorial_advanced.docbook">
					<!ENTITY Graph_Interface SYSTEM "graph_interface.docbook">
					<!ENTITY Functions SYSTEM "functions.docbook">
					<!ENTITY Algorithms SYSTEM "algorithms.docbook">
					<!ENTITY Subgraphs SYSTEM "subgraphs.docbook">
					<!ENTITY Plugins_Management SYSTEM "plugins_management.docbook">
					]>
<book><title>Tulip User Manual</title>

	<chapter id="introduction"><title>Introduction</title>

    <para>Research by the information visualization community has shown that using a visual representation of data-sets enables faster analysis by the end users. Tulip, created by David AUBER, is a contribution to the area of information visualization, <quote>InfoViz</quote>.
      <graphic fileref="images/tulip-screen.png"/>
    </para>

		<para>Tulip offers the following features:
			<itemizedlist>
				<listitem>Visualization and edition of graphs.
					All parts of the framework have been built with large graphs in mind, up to 10.000.000 elements.</listitem>
				<listitem>Navigation through geometric operations, extraction of subgraphs, filtering to change the representation.</listitem>
				<listitem>Metric computation, layout, selection, extraction of view and subgraphs.</listitem>
				<listitem>Graph management: one can work on several graphs at once, import and export them in various formats
					(including CSV, GML, dot, snapshots)</listitem>
				<listitem>Plugin architecture: one can add new algorithms
					(generate a graph, spatialize it (i.e. layout), compute a metric...), ways of interactions, views</listitem>
				<listitem>Scripting in Python, from within the GUI</listitem>
			</itemizedlist>
		</para>

<!--
	 - a powerful kernel in terms of time and memory complexity
	 - possibility to map texture without loosing performance,
	 - easy management of clusters.
	 Managing the colors of nodes in the interface is done by mapping attribute values on RGB or HSV values or size values. Two methods are proposed:
	 - linear mapping,
	 - distribution mapping.
-->
	</chapter>
	&Tutorial_beginner;
	&Graph_Interface;
	&Functions;
	&Plugins_Management;
	&Tutorial_advanced;
</book>

<!--  LocalWords:  AUBER InfoViz subgraphs
	-->
