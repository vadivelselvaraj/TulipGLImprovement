<chapter id="functions"><title>Functionalities</title>
  <!-- <sect1 id="manag-graphs"><title>Graph Management</title> -->
	<!-- The information of this section was already covered in the previous chapter -->
  <!-- </sect1> -->
  <sect1 id="algo"><title>Algorithms</title>
		&Algorithms;
  </sect1>
  <sect1 id="graph-properties"><title>Graph properties</title>
    <para>Each node and edge has a set of associated <emphasis>properties</emphasis>.
			<!-- There are two kinds of property: intrinsic and extrinsic. 
					 Intrinsic properties are those computed relatively to the graph structure.
					 On the other hand, if we build for instance the map of a region where the nodes represent cities, the label property can be used for the city name. Since it is not possible to determine the name from the graph structure, this property is extrinsic.
				-->
			The properties used by the renderer begin with the <quote>view</quote> prefix, by convention: viewColor, viewLabel, viewLayout...
			It is possible to define an unlimited number of additional properties to store information.
    </para>
		<sect2 id="list-properties"><title>Rendering Properties</title>
			<para> Here is the list of rendering properties:</para>
			<itemizedlist>
				<listitem><para><code>viewBorderColor</code>: border Color of an edge or a node.
				</para></listitem>
				<listitem><para><code>viewBorderWidth</code>
						<!-- Width of the border of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewColor</code>
						<!-- Color of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewFont</code>:
						Font path used to render the label
				</para></listitem>
				<listitem><para><code>viewFontSize</code>
						<!-- font size used to render label of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewLabel</code>
						<!-- Label of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewLabelColor</code>
						<!-- Color label of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewLabelPosition</code>
						<!-- Label position (x,y,z) of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewLayout</code>:
						Position (x,y,z) of a node, or vector of the bends positions of an edge.
				</para></listitem>
				<listitem><para><code>viewMetric</code>:
						Result of the last measure (<xref linkend="Measure"/>) algorithm applied.
				</para></listitem>
				<listitem><para><code>viewRotation</code>:
						Rotation (0 to 360) of a node or edge
				</para></listitem>
				<listitem><para><code>viewSelection</code>:
						true if the element is selected, false if not.
				</para></listitem>
				<listitem><para><code>viewShape</code>
						<!-- Shape of a node or a graph. -->
				</para></listitem>
				<listitem><para><code>viewSize</code>:
						For a node: (height, width, depth).
						For an edge: (width at source, width at end, arrow size).
						For edge size to take effect, <code>View editor</code> → <code>Rendering parameters</code> → <code>Size interpolation</code> must be unchecked.
				</para></listitem>
				<listitem><para><code>viewSrcAnchorShape</code>: <!-- TODO -->
						Shape of the source anchor of an edge.
						For this setting to take effect, <code>View editor</code> → <code>Rendering parameters</code> → <code>Arrow</code> must be checked.
				</para></listitem>
				<listitem><para><code>viewSrcAnchorSize</code> <!-- TODO -->
						<!-- Size of the source anchor of an edge. -->
				</para></listitem>
				<listitem><para><code>viewTexture</code>:
						Texture to replace the color background of the node.
				</para></listitem>
				<listitem><para><code>viewTgtAnchorShape</code>
						Like <code>viewSrcAnchorShape</code>, on opposite end of the edge.
						<!-- Shape of the target anchor of an edge. -->
				</para></listitem>
				<listitem><para><code>viewTgtAnchorSize</code>:
						<!-- Size of the target anchor of an edge. -->
				</para></listitem>
			</itemizedlist>
		</sect2>
    <sect2 id="mana-inst"><title>Management</title>
    <para>
			There are several ways to update properties:
			<itemizedlist>
				<listitem>through algorithms (as explained in <xref linkend="algo"/>)</listitem>
				<listitem> <code>Import CSV Data</code> allows (through a wizard) to import properties from a CSV file. </listitem>
				<listitem>through <code>Graph Editor</code> → <code>Property</code> (see <xref linkend="property"/>), as we now explain.
				</listitem>
			</itemizedlist>
    </para>
    <para>
			To modify the properties of just one element:
			<itemizedlist>
				<listitem> In the bottom part, select the property to update.</listitem>
        <listitem><para>In the upper part, double-click the cell to update, edit it and click OK.</para></listitem>
				<listitem>Press <keycap>Enter</keycap> to update the drawing.</listitem>
      </itemizedlist>

			To modify the properties of several elements:
      <itemizedlist>
        <listitem><para>Select elements (for instance with the <inlinegraphic fileref="images/i_selection.png"/> tool).</para></listitem>
        <listitem><para>Select the property to modify, here <code>viewLabel</code>.</para></listitem>
        <listitem>Click <code>selected only</code>: the table above displays only the selected elements.
					(if this is not checked, all nodes will be modified).</listitem>
        <listitem><para>Click <code>Set all</code>, write some text: <quote>Hello world!</quote> and click OK.</para></listitem>
				<listitem>Press enter to update the view.</listitem>
			</itemizedlist>
			Likewise, the <code>Edges</code> tab allows to modify edge properties.
		</para>
		<para>Click <code>To labels</code> to set as labels the values of the selected property.</para>
		<para>
      To remove a property, select it first, then click <code>Remove</code>.
			When deleting properties used by the renderer, those properties will be temporary removed from the list but still continue to exist.
			Note that it is not possible to remove inherited properties.
    </para>
		<para>To find a property more easily, you can enter the first letters of the property name in the text box just above the list of properties.
		</para>
    </sect2>
    <sect2 id="find-tut"><title>Find</title>
      <para>
				Menu <code>Edit</code> → <code>Find</code> allows to run a simple request on the database of elements.
				For instance,
				<itemizedlist>
					<listitem>open a graph with several nodes and select som of them with the selection tool
						<inlinegraphic fileref="images/i_selection.png"/>.</listitem>
					<listitem>Go to <code>Graph editor</code> → <code>Property</code>, click <code>Selected only</code>.
						You should see only the selected nodes in the upper part of the <code>Graph editor</code> subwindow.</listitem>
					<listitem>Click the property <code>viewRotation</code>, then <code>Set all</code>, enter <code>20</code>, click <code>OK</code>.
						We now have some nodes with a rotation of 0 degree and some other rotated 20.</listitem>
					<listitem>Unselect all nodes (Menu <code>Edit</code> or Ctrl+Shift+a).</listitem>
				</itemizedlist>
				We can now demonstrate the Find tool:
        <itemizedlist>
					<listitem> click Menu <code>Edit</code> → <code>Find</code> or Ctrl+Shift+F,</listitem>
          <listitem><para>choose <code>viewRotation</code> as input property</para></listitem>
          <listitem><para>choose <code>=</code> and <code>0</code> as filter</para></listitem>
          <listitem><para>Under <code>options</code>, select <code>Replace</code> and <code>on nodes</code>.</para></listitem>
					<listitem>Press enter.</listitem>
        </itemizedlist>
				All the non-rotated nodes should now be selected.
      </para>
			<para>For textual fields, the filter supports regular expressions.</para>
    </sect2>
  </sect1>
  <sect1 id="hierarchy"><title>Hierarchy</title>
		&Subgraphs;
  </sect1>

	<!-- has text rendering been dropped? -->
	<!-- 
     <sect1 id="text-rend"><title>Text Rendering</title>
       <para>It is possible to assign a label to each element of the graph. <application>Tulip</application> can display them with three methods: 3D and texture for node labels, bitmap for node and edge labels. 
         <figure>
           <title>Bitmap Rendering</title>
           <graphic fileref="images/bitmap-label.png"/>
         </figure>
         <figure>
           <title>3D Rendering</title>
           <graphic fileref="images/3d-label.png"/>
         </figure>
         <figure>
           <title>Texture Rendering</title>
           <graphic fileref="images/text-label.png"/>
         </figure>
       </para>
       <para>In a future version of Tulip, It will be possible to create labels with XML tags like the HTML rendering. Some tags will be available in order to allow the user to organize the content of the labels.</para>
     </sect1>
		 -->
</chapter>

<!--  LocalWords:  tlp GML graphlet XBM XPM viewColor viewLabel viewLayout
	-->
<!--  LocalWords:  uncheck
	-->
