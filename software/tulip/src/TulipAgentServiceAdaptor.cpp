/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c TulipAgentServiceAdaptor -a include/TulipAgentServiceAdaptor.h:src/TulipAgentServiceAdaptor.cpp resources/org.labri.TulipAgentService.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "TulipAgentServiceAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class TulipAgentServiceAdaptor
 */

TulipAgentServiceAdaptor::TulipAgentServiceAdaptor(QObject *parent)
  : QDBusAbstractAdaptor(parent) {
  // constructor
  setAutoRelaySignals(true);
}

TulipAgentServiceAdaptor::~TulipAgentServiceAdaptor() {
  // destructor
}

qlonglong TulipAgentServiceAdaptor::pid() const {
  // get the value of property pid
  return qvariant_cast< qlonglong >(parent()->property("pid"));
}

void TulipAgentServiceAdaptor::AddPluginRepository(const QString &url) {
  // handle method call org.labri.Tulip.AddPluginRepository
  QMetaObject::invokeMethod(parent(), "AddPluginRepository", Q_ARG(QString, url));
}

void TulipAgentServiceAdaptor::CreatePerspective(const QString &name) {
  // handle method call org.labri.Tulip.CreatePerspective
  QMetaObject::invokeMethod(parent(), "CreatePerspective", Q_ARG(QString, name));
}

void TulipAgentServiceAdaptor::CreatePerspective(const QString &name, const QVariantMap &parameters) {
  // handle method call org.labri.Tulip.CreatePerspective
  QMetaObject::invokeMethod(parent(), "CreatePerspective", Q_ARG(QString, name), Q_ARG(QVariantMap, parameters));
}

void TulipAgentServiceAdaptor::EnableCrashHandling(const QString &folder, qlonglong pid) {
  // handle method call org.labri.Tulip.EnableCrashHandling
  QMetaObject::invokeMethod(parent(), "EnableCrashHandling", Q_ARG(QString, folder), Q_ARG(qlonglong, pid));
}

QStringList TulipAgentServiceAdaptor::GetCompatiblePerspectives(const QString &file) {
  // handle method call org.labri.Tulip.GetCompatiblePerspectives
  QStringList result;
  QMetaObject::invokeMethod(parent(), "GetCompatiblePerspectives", Q_RETURN_ARG(QStringList, result), Q_ARG(QString, file));
  return result;
}

void TulipAgentServiceAdaptor::OpenProject(const QString &file) {
  // handle method call org.labri.Tulip.OpenProject
  QMetaObject::invokeMethod(parent(), "OpenProject", Q_ARG(QString, file));
}

void TulipAgentServiceAdaptor::OpenProjectWith(const QString &file, const QString &perspective, const QVariantMap &parameters) {
  // handle method call org.labri.Tulip.OpenProjectWith
  QMetaObject::invokeMethod(parent(), "OpenProjectWith", Q_ARG(QString, file), Q_ARG(QString, perspective), Q_ARG(QVariantMap, parameters));
}

void TulipAgentServiceAdaptor::RemovePluginRepository(const QString &url) {
  // handle method call org.labri.Tulip.RemovePluginRepository
  QMetaObject::invokeMethod(parent(), "RemovePluginRepository", Q_ARG(QString, url));
}

void TulipAgentServiceAdaptor::ShowAboutPage() {
  // handle method call org.labri.Tulip.ShowAboutPage
  QMetaObject::invokeMethod(parent(), "ShowAboutPage");
}

void TulipAgentServiceAdaptor::ShowOpenProjectWindow() {
  // handle method call org.labri.Tulip.ShowOpenProjectWindow
  QMetaObject::invokeMethod(parent(), "ShowOpenProjectWindow");
}

void TulipAgentServiceAdaptor::ShowPluginsCenter() {
  // handle method call org.labri.Tulip.ShowPluginsCenter
  QMetaObject::invokeMethod(parent(), "ShowPluginsCenter");
}

void TulipAgentServiceAdaptor::ShowTrayMessage(const QString &title, const QString &message, uint icon, uint duration) {
  // handle method call org.labri.Tulip.ShowTrayMessage
  QMetaObject::invokeMethod(parent(), "ShowTrayMessage", Q_ARG(QString, title), Q_ARG(QString, message), Q_ARG(uint, icon), Q_ARG(uint, duration));
}

void TulipAgentServiceAdaptor::ShowWelcomeScreen() {
  // handle method call org.labri.Tulip.ShowWelcomeScreen
  QMetaObject::invokeMethod(parent(), "ShowWelcomeScreen");
}

