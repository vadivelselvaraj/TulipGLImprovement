dnl Process this file with autoconf to produce a configure script.
m4_pattern_allow([^AS_])
AC_REVISION($Revision: 1.48 $)
AC_PREREQ(2.53)
AC_INIT(tulip, 3.4.0)
AC_CONFIG_SRCDIR(library/tulip/include/tulip/Graph.h)
AM_INIT_AUTOMAKE(1.6 dist-bzip2)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE
AC_CANONICAL_HOST

dnl autoheader templates for config.h.in
AH_TOP(
#ifndef CONFIG_H
#define CONFIG_H

#if (__GNUC__ < 3)
#define STL_EXT_NS std
#define _DEPRECATED
#else
#define STL_EXT_NS __gnu_cxx
#define _DEPRECATED __attribute__ ((deprecated))
#endif
)

AH_BOTTOM(
#endif //CONFIG_H       
)

dnl Checks for programs.
dnl ensure CXXFLAGS is defined before calling AC_PROG_CXX
CXXFLAGS=${CXXFLAGS}
CFLAGS=${CFLAGS}
AC_LANG(C++)    dnl uses C++ compiler and preprocessor for tests
AC_PROG_CXX
AC_PROG_CXXCPP
m4_pattern_allow([AC_OPENMP])
AC_OPENMP
##AC_PROG_JAVA

dnl check for java
AC_PATH_PROG(JAVA, java, not_found)
if test "$JAVA" = "not_found"; then
AC_MSG_WARN([
                Unable to find java in PATH. 
		Need for the documentation build. Reference guide will not
                be generated])
fi

dnl check for doxygen
AC_PATH_PROG(DOXYGEN, doxygen, not_found)
if test "$DOXYGEN" = "not_found"; then
AC_MSG_WARN([
                Unable to find doxygen in PATH. 
		Need for the Code Documentation build.
		Reference guide will not
                be generated])
fi
dnl used when generating docs
THIS_YEAR=$(date +%Y)
AC_SUBST(THIS_YEAR)

dnl check for dot
AC_PATH_PROG(DOT, dot, not_found)
if test "$DOT" = "not_found"; then
AC_MSG_WARN([
                Unable to find dot in PATH. 
		Need for the Code Documentation build (optional).
		Reference guide will not
                be generated])
fi

dnl check for xmllint
AC_PATH_PROG(XMLLINT, xmllint, not_found)
if test "$XMLLINT" = "not_found"; then
AC_MSG_WARN([
                Unable to find xmllint in PATH.
		Need for checking the XML validation (for Docbook Documentation).
		Available in libxml2 package.
		Reference guide will not
                be generated])
fi

dnl check for pdfxmltex
AC_PATH_PROG(PDFXMLTEX, pdfxmltex, not_found)
if test "$PDFXMLTEX" = "not_found"; then
AC_MSG_WARN([
                Unable to find pdfmltex in PATH.
                Need for Documentation in PDF format (optional).
		Available in passivetex package.
                Reference guide will not
                be generated])
fi

AC_SUBST([abs_top_builddir])
AC_SUBST([abs_builddir])
AC_SUBST([abs_top_srcdir])
AC_SUBST([abs_srcdir])

dnl lex/yacc needed by thirdparty/lp_solve
dnl AC_PROG_YACC
dnl AM_PROG_LEX

MAJOR_VERSION=`echo ${VERSION} | tail -n 1 | awk -F'.' '{print $1}'`
MINOR_VERSION=`echo ${VERSION} | tail -n 1 | awk -F'.' '{print $2}'`
libversion=${MAJOR_VERSION}.${MINOR_VERSION}
AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(libversion)

VAR_WIN32=0
VAR_MACOSX=0
VAR_MACOSX_7=0
VAR_I64=0
VAR_LINUX=0
VAR_MACPPC=0

case "`uname -m`" in
     x86_64  | ia64)
        VAR_I64=1
	;;
esac

case "`uname -s`" in
    *win32* | *WIN32* | *mingw* | *MINGW32*)
	 VAR_WIN32=1
	 WIN_VERSION=`echo ${MAJOR_VERSION}-${MINOR_VERSION}`
	 WIN_EXE_VERSION=`echo ${VERSION} | tr . _`
	 AC_SUBST(WIN_VERSION)
	 AC_SUBST(WIN_EXE_VERSION)
	 AC_PATH_MINGW
	 ;;
    *darwin* | *Darwin* | *DARWIN*)
	VAR_MACOSX=1
        bindir=$bindir/tulip.app/Contents/MacOS
        if test "$(uname -r)" = "7.9.0"; then
	  VAR_MACOSX_7=1
        fi
        if test "$(uname -m)" = "Power Macintosh"; then
	  VAR_MACPPC=1
        fi
	;;
    *Linux*|*GNU/kFreeBSD*)
	VAR_LINUX=1
	;;	
esac

AM_CONDITIONAL(WIN32, test $VAR_WIN32 = 1)
AM_CONDITIONAL(MACOSX, test $VAR_MACOSX = 1)
AM_CONDITIONAL(MACOSX_7, test $VAR_MACOSX_7 = 1)
AM_CONDITIONAL(I64, test $VAR_I64 = 1)
AM_CONDITIONAL(LINUX, test $VAR_LINUX = 1)
AM_CONDITIONAL(MACPPC, test $VAR_MACPPC = 1)

dnl
AC_LIBTOOL_DLOPEN
AC_LIBTOOL_PICMODE(no)
AC_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
dnl not all gcc 2.95 based systems have the sstream header but strstream
AC_CHECK_HEADERS(sstream,[],
		[
                AC_MSG_NOTICE(generating a compatible sstream header)
		echo "// DO NOT MODIFY!  This file is generated." > sstream
		echo "#ifndef __SSTREAM" >> sstream
		echo "#define __SSTREAM" >> sstream
                echo "#ifndef HAVE_SSTREAM" >> sstream
		echo "#include <string>" >> sstream
		echo "#include <strstream>" >> sstream
		echo "namespace std" >> sstream
		echo "  {" >> sstream
		echo "    class stringstream : public strstream" >> sstream
		echo "      {" >> sstream
		echo "      public:" >> sstream
		echo "        stringstream() : strstream() { }" >> sstream
		echo "        virtual ~stringstream() { }" >> sstream
		echo "        string str()" >> sstream
		echo "          {" >> sstream
		echo "            *this << '\0';" >> sstream
		echo "            char *tmp = strstream::str();" >> sstream
		echo "            string retval(tmp);" >> sstream
		echo "            strstream::freeze(0);" >> sstream
		echo "            return retval;" >> sstream
		echo "          }" >> sstream
		echo "      };" >> sstream
		echo "  }" >> sstream
                echo "#endif // HAVE_SSTREAM" >> sstream
		echo "#endif // __SSTREAM" >> sstream
		]
)

dnl debug flag
AC_ARG_ENABLE(debug,
[  --enable-debug          Compilation flags to allow debugging],
  [CXXFLAGS="-Wall -g -pipe"],
  CXXFLAGS="-DNDEBUG -O3 -funroll-loops -pipe " 
)

CXXFLAGS="$CXXFLAGS $OPENMP_CXXFLAGS"

if test ${VAR_I64} = 1
then
  CPPFLAGS="$CPPFLAGS -DI64"
else
  if test ${VAR_MACPPC} = 1
  then
    CPPFLAGS="$CPPFLAGS -DMACPPC"
  else
    if test ${VAR_MACOSX} = 1
    then
      CPPFLAGS="$CPPFLAGS -m32"
      LDFLAGS="${LDFLAGS} -m32"
    fi
  fi
fi

dnl check if we build tulip-ogl
AC_ARG_ENABLE(tulip-ogl,
[  --disable-tulip-ogl     Disable build of tulip-ogl library (will force disable-tulip-qt)],
  CONFIGURE_tulipogl="", CONFIGURE_tulipogl="tulip-ogl"
)

AC_SUBST(CONFIGURE_tulipogl)

dnl Checks for X11, OpenGL, Qt
if test "${CONFIGURE_tulipogl}" != ""
 then
   if test ${VAR_LINUX} = 1
   then
     AC_PATH_X
     AM_PATH_XML2(2.5.4)
   fi
   if test ${VAR_MACOSX} = 0
     then
       if test "${x_includes}" != "NONE" -a "${x_includes}" != ""
       then
         CPPFLAGS="${CPPFLAGS} -I${x_includes}"
         LDFLAGS="${LDFLAGS} -L${x_libraries}"
       fi
   fi
AC_PATH_GL

dnl statistics flag
AC_ARG_ENABLE(qt-picture-output,
[  --disable-qt-picture-output      Disable Qt Picture output],
  CXXFLAGS="$CXXFLAGS -DWITHOUT_QT_PICTURE_OUTPUT")


AC_ARG_ENABLE(tlprender,
[  --enable-tlprender      Enable build of tlprender (tlprender requires OSMesa)],
  CONFIGURE_tlprender="tlprender", CONFIGURE_tlprender=""
)

if test "${CONFIGURE_tlprender}" != ""
 then
  AC_CHECK_HEADERS(GL/osmesa.h, [],
                   [CONFIGURE_tlprender=""
                    AC_MSG_WARN([OSMesa header not found, will not build tlprender])
                   ])
  AC_CHECK_LIB(OSMesa, OSMesaCreateContext,
               [AC_DEFINE(HAVE_LIBOSMESA, 1, [libOSMesa present])],
               [CONFIGURE_tlprender=""
                AC_MSG_WARN([OSMesa library not found, will not build tlprender])],
               [${GL_INCLUDES} ${GL_LDFLAGS} ${LIB_GL}])
fi

AC_ARG_ENABLE(tulip-qt,
[  --disable-tulip-qt     Disable build of tulip-qt library (will force disable-tulip-gui)],
  CONFIGURE_tulipqt="", CONFIGURE_tulipqt="tulip-qt"
)
else
  CONFIGURE_tulipqt=""
  CONFIGURE_tulipgui=""
  CONFIGURE_tlprender=""
fi

AC_SUBST(CONFIGURE_tulipogl)
AC_SUBST(CONFIGURE_tlprender)
AM_CONDITIONAL(HAVE_TULIP_OGL, test "${CONFIGURE_tulipogl}" != "")
AM_CONDITIONAL(LIBXML2, test "x$XML_LIBS" != "x")

if test "${CONFIGURE_tulipqt}" != ""
 then
AC_PATH_QT
AC_PATH_QT_MOC
AC_PATH_QT_UIC
AC_PATH_QT_RCC

AC_ARG_ENABLE(tulip-gui,
[  --disable-tulip-gui     Disable build of tulip gui],
  CONFIGURE_tulipgui="", CONFIGURE_tulipgui="plugins-manager tulip"
)
else
  CONFIGURE_tulipgui=""
fi

if test $QT_MINOR_VERSION -ge 4; then
VAR_QT44=1
fi

AM_CONDITIONAL(QT44, test $VAR_QT44 = 1) 

AC_SUBST(CONFIGURE_tulipqt)
AC_SUBST(CONFIGURE_tulipgui)
AM_CONDITIONAL(HAVE_TULIP_QT, test "${CONFIGURE_tulipqt}" != "")

# define TLP_INCLUDE, TLP_LDFLAGS, ...
# it is *very* important to use top_srcdir for INCLUDE and top_builddir for LDFLAGS,
# otherwise the target 'distcheck' will fail
TULIP_INCLUDE='-I$(top_srcdir)/library/tulip/include -I$(top_builddir)/library/tulip/include -I$(top_builddir)/library/tulip/include/tulip'
TULIP_OGL_INCLUDE='-I$(top_srcdir)/library/tulip-ogl/include'
TULIP_QT_INCLUDE='-I$(top_srcdir)/library/tulip-qt/include -I$(top_builddir)/library/tulip-qt/include'
TULIP_PLUGINSMANAGER_INCLUDE='-I$(top_srcdir)/software/plugins-manager/include'
TULIP_LDFLAGS='-L$(top_builddir)/library/tulip/src -ltulip $(OPENMP_CXXFLAGS)'
TULIP_OGL_LDFLAGS='-L$(top_builddir)/library/tulip-ogl/src -ltulip-ogl'
TULIP_QT_LDFLAGS='-L$(top_builddir)/library/tulip-qt/src -ltulip-qt4'
TULIP_PLUGINSMANAGER_LDFLAGS='-L$(top_builddir)/software/plugins-manager/src -ltulip-pluginsmanager'
TULIP_PLUGINS_BUILD_PATH=$PWD/plugins
TULIP_QTDESIGNERPLUGIN='$(top_builddir)/library/tulip-qt/src/.libs'
AC_SUBST(TULIP_INCLUDE)
AC_SUBST(TULIP_LDFLAGS)
AC_SUBST(TULIP_OGL_INCLUDE)
AC_SUBST(TULIP_OGL_LDFLAGS)
AC_SUBST(TULIP_QT_INCLUDE)
AC_SUBST(TULIP_QT_LDFLAGS)
AC_SUBST(TULIP_PLUGINSMANAGER_INCLUDE)
AC_SUBST(TULIP_PLUGINSMANAGER_LDFLAGS)
AC_SUBST(TULIP_PLUGINS_BUILD_PATH)
AC_SUBST(TULIP_QTDESIGNERPLUGIN)
dnl Checks for library functions.
LIB_IMAGES_LDFLAGS=""

AC_CHECK_LIB(png, png_create_write_struct,
		  [LIB_IMAGES_LDFLAGS="${LIB_IMAGES_LDFLAGS} -lpng"
                   AC_DEFINE(HAVE_LIBPNG, 1, [libpng present])
                   PNG=true
                  ])
AM_CONDITIONAL(PNG, test x$PNG = xtrue)

AC_CHECK_LIB(jpeg, jpeg_std_error,
		   [LIB_IMAGES_LDFLAGS="${LIB_IMAGES_LDFLAGS} -ljpeg"
                    AC_DEFINE(HAVE_LIBJPEG, 1, [libjpeg present])
                    JPEG=true
                   ])
AM_CONDITIONAL(JPEG, test x$JPEG = xtrue)
AC_SUBST(LIB_IMAGES_LDFLAGS)

dnl gzstream ldflag points to top_srcdir
dnl because it is a no_inst target and 'distcheck' makes the difference
AC_ARG_WITH([gzstream-includes],AS_HELP_STRING([--with-gzstream-includes=FLAGS],[cppflags for libgzstream]),
 [GZSTREAM_INCLUDE=$withval],
 [GZSTREAM_INCLUDE='-I$(top_srcdir)/thirdparty/gzstream'])
AC_ARG_WITH([gzstream-lib],AS_HELP_STRING([--with-gzstream-lib=FLAGS],[ldflags to link with gzstream]),
 [GZSTREAM_LDFLAGS=$withval],
 [GZSTREAM_LDFLAGS='$(top_builddir)/thirdparty/gzstream/libgzstream.la -lz'])
AC_SUBST(GZSTREAM_INCLUDE)
AC_SUBST(GZSTREAM_LDFLAGS)

AC_ARG_WITH([ftgl-includes],AS_HELP_STRING([--with-ftgl-includes=FLAGS],[cppflags for libftgl]),
 [FTGL_INCLUDE=$withval],
 [FTGL_INCLUDE='-I$(top_srcdir)/thirdparty/ftgl'])
AC_ARG_WITH([ftgl-lib],AS_HELP_STRING([--with-ftgl-lib=FLAGS],[ldflags to link with libftgl]),
 [FTGL_LDFLAGS=$withval],
 [FTGL_LDFLAGS='$(top_builddir)/thirdparty/ftgl/libftgl.la'])
AC_SUBST(FTGL_INCLUDE)
AC_SUBST(FTGL_LDFLAGS)

dnl first add platform dependent generated files
if test ${VAR_WIN32} = 1
then
  ac_config_files=${PACKAGE}-${VERSION}.nsi:tulip.nsi.in
else 
  if test ${VAR_MACOSX} = 1
  then
    ac_config_files="make_${PACKAGE}-${VERSION}_mac_bundle.sh:make_tulip_mac_bundle.sh.in Info.plist:tulip_mac_info.plist.in"
  else
    ac_config_files=${PACKAGE}-${VERSION}.spec:tulip.spec.in
  fi
fi

dnl then the platform independent files
AC_OUTPUT(
tulip-config
Makefile
library/Makefile
library/tulip/Makefile
library/tulip/include/Makefile
library/tulip/include/tulip/TulipRelease.h
library/tulip/src/Makefile
library/tulip-ogl/Makefile
library/tulip-ogl/bitmaps/Makefile
library/tulip-ogl/include/Makefile
library/tulip-ogl/src/Makefile
library/tulip-qt/Makefile
library/tulip-qt/designer/Makefile
library/tulip-qt/include/Makefile
library/tulip-qt/src/Makefile
thirdparty/Makefile
thirdparty/gzstream/Makefile
thirdparty/ftgl/Makefile
software/Makefile
software/plugins-manager/Makefile
software/plugins-manager/src/Makefile
software/plugins-manager/include/Makefile
software/plugins-manager/designer/Makefile
software/plugins-manager/server/Makefile
software/plugins-manager/server/src/Makefile
software/plugins-manager/server/include/Makefile
software/tulip/Makefile
software/tulip/include/Makefile
software/tulip/src/Makefile
software/tulip/bitmaps/Makefile
software/tulip/designer/Makefile
software/tlprender/Makefile
software/tlprender/src/Makefile
plugins/Makefile
plugins/layout/Makefile
plugins/metric/Makefile
plugins/clustering/Makefile
plugins/selection/Makefile
plugins/import/Makefile
plugins/export/Makefile
plugins/sizes/Makefile
plugins/colors/Makefile
plugins/glyph/Makefile
plugins/view/Makefile
plugins/view/spreadsheet/Makefile
plugins/interactor/Makefile
unit_test/plugins/pluginstest.cpp
docs/Makefile
docs/devTeamDoxygen/Makefile
docs/devTeamDoxygen/footer.html:docs/devTeamDoxygen/footer.html.in
docs/devTeamDoxygen/header.html:docs/devTeamDoxygen/header.html.in
docs/devTeamDoxygen/tulip.html:docs/devTeamDoxygen/tulip.html.in
docs/doxygen/Makefile
docs/doxygen/header-allPlugins.html:docs/doxygen/header-allPlugins.html.in
docs/doxygen/footer.html:docs/doxygen/footer.html.in
docs/doxygen/header.html:docs/doxygen/header.html.in
docs/doxygen/tulip.html:docs/doxygen/tulip.html.in
docs/developerHandbook/Makefile
docs/userHandbook/Makefile,
[chmod +x tulip-config]
)
