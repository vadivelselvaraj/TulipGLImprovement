dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Revision: 1.10 $)
AC_PREREQ(2.53)
AC_INIT(tulip, 2.0.3)
AC_CONFIG_SRCDIR(library/tulip/include/tulip/SuperGraph.h)
AM_INIT_AUTOMAKE(1.6 dist-bzip2)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

dnl version for libraries name (e.g. libtulip-1.2.so.x.x.x)
TULIP_VERSION=2.0
AC_SUBST(TULIP_VERSION)
dnl autoheader templates for config.h.in
AH_TOP(
#ifndef CONFIG_H
#define CONFIG_H

#if (__GNUC__ < 3)
#define STL_EXT_NS std
#define _DEPRECATED
#else
#define STL_EXT_NS __gnu_cxx
#define _DEPRECATED __attribute__ ((deprecated))
#endif
)

AH_BOTTOM(
#endif //CONFIG_H       
)

dnl Checks for programs.
dnl ensure CXXFLAGS is defined before calling AC_PROG_CXX
CXXFLAGS=${CXXFLAGS}
CFLAGS=${CFLAGS}
AC_LANG(C++)    dnl uses C++ compiler and preprocessor for tests
AC_PROG_CXX
AC_PROG_CXXCPP
##AC_PROG_JAVA

dnl check for java
AC_PATH_PROG(JAVA, java, not_found)
if test "$JAVA" = "not_found"; then
AC_MSG_WARN([
                Unable to find java in PATH. 
		Need for the documentation build. Reference guide will not
                be generated])
fi

dnl check for doxygen
AC_PATH_PROG(DOXYGEN, doxygen, not_found)
if test "$DOXYGEN" = "not_found"; then
AC_MSG_WARN([
                Unable to find doxygen in PATH. 
		Need for the Code Documentation build.
		Reference guide will not
                be generated])
fi

dnl check for dot
AC_PATH_PROG(DOT, dot, not_found)
if test "$DOT" = "not_found"; then
AC_MSG_WARN([
                Unable to find dot in PATH. 
		Need for the Code Documentation build (optional).
		Reference guide will not
                be generated])
fi

dnl check for xmllint
AC_PATH_PROG(XMLLINT, xmllint, not_found)
if test "$XMLLINT" = "not_found"; then
AC_MSG_WARN([
                Unable to find xmllint in PATH.
		Need for checking the XML validation (for Docbook Documentation).
		Available in libxml2 package.
		Reference guide will not
                be generated])
fi

dnl check for xmllint
AC_PATH_PROG(PDFXMLTEX, pdfxmltex, not_found)
if test "$PDFXMLTEX" = "not_found"; then
AC_MSG_WARN([
                Unable to find pdfmltex in PATH.
                Need for Documentation in PDF format (optional).
		Available in passivetex package.
                Reference guide will not
                be generated])
fi


dnl lex/yacc needed by thirdparty/lp_solve
dnl AC_PROG_YACC
dnl AM_PROG_LEX

VAR_WIN32=0
VAR_CYGWIN=0
case "`uname -s`" in
    *win32* | *WIN32* | *mingw* | *MINGW32*)
	 VAR_WIN32=1
	 AC_LIBTOOL_WIN32_DLL
	 WIN_VERSION=`echo ${VERSION} | tr . -`
	 AC_SUBST(WIN_VERSION)
	 AC_PATH_MINGW
	 ;;
    *CYGWIN_NT* | *cygwin* | *CYGWIN_NT*)
	VAR_CYGWIN=1
	AC_LIBTOOL_WIN32_DLL
	;;
esac

AM_CONDITIONAL(WIN32, test $VAR_WIN32 = 1)
AM_CONDITIONAL(CYGWIN, test $VAR_CYGWIN = 1)

dnl
AC_LIBTOOL_DLOPEN
AC_LIBTOOL_PICMODE(no)
AC_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
dnl not all gcc 2.95 based systems have the sstream header but strstream
AC_CHECK_HEADERS(sstream,[],
		[
                AC_MSG_NOTICE(generating a compatible sstream header)
		echo "// DO NOT MODIFY!  This file is generated." > sstream
		echo "#ifndef __SSTREAM" >> sstream
		echo "#define __SSTREAM" >> sstream
                echo "#ifndef HAVE_SSTREAM" >> sstream
		echo "#include <string>" >> sstream
		echo "#include <strstream>" >> sstream
		echo "namespace std" >> sstream
		echo "  {" >> sstream
		echo "    class stringstream : public strstream" >> sstream
		echo "      {" >> sstream
		echo "      public:" >> sstream
		echo "        stringstream() : strstream() { }" >> sstream
		echo "        virtual ~stringstream() { }" >> sstream
		echo "        string str()" >> sstream
		echo "          {" >> sstream
		echo "            *this << '\0';" >> sstream
		echo "            char *tmp = strstream::str();" >> sstream
		echo "            string retval(tmp);" >> sstream
		echo "            strstream::freeze(0);" >> sstream
		echo "            return retval;" >> sstream
		echo "          }" >> sstream
		echo "      };" >> sstream
		echo "  }" >> sstream
                echo "#endif // HAVE_SSTREAM" >> sstream
		echo "#endif // __SSTREAM" >> sstream
		]
)

dnl Checks for X11, OpenGL, Qt
if test ${VAR_WIN32} != 1
then
AC_PATH_X
fi
AC_PATH_QT
AC_PATH_QT_UIC
AC_PATH_QT_MOC
AC_PATH_GL

dnl 2.5.4 is libxml2 shipped with RedHat 9.0
dnl import plugin XML needs libxml/xmlreader.h, not present in redhat 8 libxml2

if test ${VAR_WIN32} != 1
then
AM_PATH_XML2(2.5.4)
fi
AM_CONDITIONAL(LIBXML2, test x$XML_LIBS != x)

dnl debug flag
AC_ARG_ENABLE(debug,
[  --enable-debug          Compilation flags to allow debugging],
  CXXFLAGS="-O0 -Wall -g -pipe ",  CXXFLAGS="-DNDEBUG -O2 -pipe " 
)

dnl check if we build tlprender, option and presence of OSMesa
AC_ARG_ENABLE(tlprender,
[  --disable-tlprender     Disable compilation of tlprender (tlprender requires OSMesa)],
  CONFIGURE_tlprender="", CONFIGURE_tlprender="tlprender"
)

if test ${CONFIGURE_tlprender} != ""
then
  AC_CHECK_HEADERS(GL/osmesa.h, [],
                   [CONFIGURE_tlprender=""
                    AC_MSG_WARN([OSMesa header not found, will not build tlprender])
                   ])
fi
if test ${CONFIGURE_tlprender} != ""
then
  AC_CHECK_LIB(OSMesa, OSMesaCreateContext,
               [AC_DEFINE(HAVE_LIBOSMESA, 1, [libOSMesa present])],
               [CONFIGURE_tlprender=""
                AC_MSG_WARN([OSMesa library not found, will not build tlprender])],
               [${GL_INCLUDES} ${GL_LDFLAGS} ${LIB_GL}])
fi

AC_SUBST(CONFIGURE_tlprender)

# define TLP_INCLUDE, TLP_LDFLAGS, ...
# it is *very* important to use top_srcdir for INCLUDE and top_builddir for LDFLAGS,
# otherwise the target 'distcheck' will fail
TULIP_INCLUDE='-I$(top_srcdir)/library/tulip/include '
TULIP_LDFLAGS='-L$(top_builddir)/library/tulip/src -ltulip'
TULIP_OGL_INCLUDE='-I$(top_srcdir)/library/tulip-ogl/include'
TULIP_OGL_LDFLAGS='-L$(top_builddir)/library/tulip-ogl/src -ltulip-ogl'
TULIP_QT_INCLUDE='-I$(top_srcdir)/library/tulip-qt/include'
TULIP_QT_LDFLAGS='-L$(top_builddir)/library/tulip-qt/src -ltulip-qt'
TULIP_PLUGINPATH='$(top_builddir)/plugins'
TULIP_QTDESIGNERPLUGIN='$(top_builddir)/library/tulip-qt/src/.libs'
AC_SUBST(TULIP_INCLUDE)
AC_SUBST(TULIP_LDFLAGS)
AC_SUBST(TULIP_OGL_INCLUDE)
AC_SUBST(TULIP_OGL_LDFLAGS)
AC_SUBST(TULIP_QT_INCLUDE)
AC_SUBST(TULIP_QT_LDFLAGS)
AC_SUBST(TULIP_QTDESIGNERPLUGIN)
dnl Checks for library functions.
LIB_IMAGES_LDFLAGS=""

AC_CHECK_LIB(png, png_create_write_struct,
		  [LIB_IMAGES_LDFLAGS="${LIB_IMAGES_LDFLAGS} -lpng"
                   AC_DEFINE(HAVE_LIBPNG, 1, [libpng present])
                   PNG=true
                  ])
AM_CONDITIONAL(PNG, test x$PNG = xtrue)

AC_CHECK_LIB(jpeg, jpeg_std_error,
		   [LIB_IMAGES_LDFLAGS="${LIB_IMAGES_LDFLAGS} -ljpeg"
                    AC_DEFINE(HAVE_LIBJPEG, 1, [libjpeg present])
                    JPEG=true
                   ])
AM_CONDITIONAL(JPEG, test x$JPEG = xtrue)
AC_SUBST(LIB_IMAGES_LDFLAGS)

dnl
dnl configure thirdparty libraries and sets flags
dnl
LIBGLE_INCLUDE='-I$(top_srcdir)/thirdparty/gle/'
LIBGLE_LDFLAGS='$(top_srcdir)/thirdparty/gle/libgle.la'
AC_SUBST(LIBGLE_INCLUDE)
AC_SUBST(LIBGLE_LDFLAGS)

dnl gzstream ldflag points to top_srcdir
dnl because it is a no_inst target and 'distcheck' makes the difference
GZSTREAM_INCLUDE='-I$(top_srcdir)/thirdparty/gzstream'
GZSTREAM_LDFLAGS='$(top_srcdir)/thirdparty/gzstream/libgzstream.la -lz'
AC_SUBST(GZSTREAM_INCLUDE)
AC_SUBST(GZSTREAM_LDFLAGS)

dnl **********
AC_OUTPUT(
${PACKAGE}-${VERSION}.spec:tulip.spec.in
${PACKAGE}-${VERSION}.nsi:tulip.nsi.in
tulip-config
Makefile
library/Makefile
library/tulip/Makefile
library/tulip/include/Makefile
library/tulip/src/Makefile
library/tulip-ogl/Makefile
library/tulip-ogl/bitmaps/Makefile
library/tulip-ogl/include/Makefile
library/tulip-ogl/src/Makefile
library/tulip-qt/Makefile
library/tulip-qt/designer/Makefile
library/tulip-qt/include/Makefile
library/tulip-qt/src/Makefile
thirdparty/Makefile
thirdparty/gzstream/Makefile
thirdparty/ftgl/Makefile
thirdparty/gle/Makefile
thirdparty/triangle/Makefile
software/Makefile
software/tulip/Makefile
software/tulip/include/Makefile
software/tulip/src/Makefile
software/tulip/bitmaps/Makefile
software/tulip/designer/Makefile
software/tlprender/Makefile
software/tlprender/include/Makefile
software/tlprender/src/Makefile
plugins/Makefile
plugins/layout/Makefile
plugins/metric/Makefile
plugins/clustering/Makefile
plugins/selection/Makefile
plugins/import/Makefile
plugins/export/Makefile
plugins/sizes/Makefile
plugins/colors/Makefile
plugins/int/Makefile
plugins/string/Makefile
plugins/glyph/Makefile
samples/Makefile
samples/gml/Makefile
samples/tlp/Makefile
samples/matrix/Makefile
docs/Makefile
docs/doxygen/Makefile
docs/developerHandbook/Makefile
docs/userHandbook/Makefile,
[chmod +x tulip-config]
)
